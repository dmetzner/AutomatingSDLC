<?php

namespace Tests\phpUnit\Api\User;

use App\Entity\User;
use Doctrine\ORM\EntityManager;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * @internal
 * @covers \App\Api\UserApi
 */
class UserRegisterTest extends WebTestCase
{
  /**
   * {@inheritdoc}
   */
  private EntityManager $entity_manager;

  public function setUp(): void
  {
    static::$kernel = static::createKernel();
    static::$kernel->boot();
    $this->entity_manager = static::$kernel->getContainer()
      ->get('doctrine')
      ->getManager()
      ;
  }

  /**
   * {@inheritdoc}
   */
  protected function tearDown(): void
  {
    parent::tearDown();
    $this->entity_manager->close();
  }

  public function testUser(): void
  {
    $client = static::createClient();

    $client->request('POST', '/api/user', [], [], [], '{"dry-run" : false, "email" : "test@test.at", "username" : "Testuser", "password" : "123456"}');
    $this->assertResponseStatusCodeSame(415);

    $client->request('POST', '/api/user', [], [], ['HTTP_ACCEPT' => 'application/json', 'CONTENT_TYPE' => 'application/json'], '{"dry-run" : true, "email" : "", "username" : "", "password" : ""}');
    $this->assertResponseStatusCodeSame(422);
    $data = $client->getResponse()->getContent();
    $this->assertJsonStringEqualsJsonString($data, '{"email": "Email missing","username": "Username missing","password": "Password missing"}');

    $client->request('POST', '/api/user', [], [], ['HTTP_ACCEPT' => 'application/json', 'CONTENT_TYPE' => 'application/json'], '{"dry-run" : true, "email" : "testqtest.at", "username" : "ca", "password" : "123"}');
    $this->assertResponseStatusCodeSame(422);
    $data = $client->getResponse()->getContent();
    $this->assertJsonStringEqualsJsonString($data, '{"email": "Email invalid","username": "Username too short","password": "Password too short"}');

    $client->request('POST', '/api/user', [], [], ['HTTP_ACCEPT' => 'application/json', 'CONTENT_TYPE' => 'application/json'], '{"dry-run" : true, "email" : "test@test.at", "username" : "ca111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "password}');
    $this->assertResponseStatusCodeSame(422);
    $data = $client->getResponse()->getContent();
    $this->assertJsonStringEqualsJsonString($data, '{"username": "Username too long","password": "Password too long"}');

    $client->request('POST', '/api/user', [], [], ['HTTP_ACCEPT' => 'application/json', 'CONTENT_TYPE' => 'application/json'], '{"dry-run" : true, "email" : "test@test.at", "username" : "testuser", "password" : "1234567ö"}');
    $this->assertResponseStatusCodeSame(422);
    $data = $client->getResponse()->getContent();
    $this->assertJsonStringEqualsJsonString($data, '{"password": "Password contains invalid chars"}');

    $client->request('POST', '/api/user', [], [], ['HTTP_ACCEPT' => 'application/json', 'CONTENT_TYPE' => 'application/json'], '{"dry-run" : true, "email" : "CatrobatUser@localhost.at", "username" : "Catrobat", "password" : "1234567"}');
    $this->assertResponseStatusCodeSame(422);
    $data = $client->getResponse()->getContent();
    $this->assertJsonStringEqualsJsonString($data, '{"email": "Email already in use","username": "Username already in use"}');

    $client->request('POST', '/api/user', [], [], ['HTTP_ACCEPT' => 'application/json', 'CONTENT_TYPE' => 'application/json', 'HTTP_ACCEPT_LANGUAGE' => 'de'], '{"dry-run" : true, "email" : "CatrobatUser@localhost.at", "username" : "Catrobat", "password" : "1234567"}');
    $this->assertResponseStatusCodeSame(422);
    $data = $client->getResponse()->getContent();
    $this->assertJsonStringEqualsJsonString($data, '{"email": "EMail wird bereits benützt","username": "Benutzername wird bereits benützt"}');

    $client->request('POST', '/api/user', [], [], ['HTTP_ACCEPT' => 'application/json', 'CONTENT_TYPE' => 'application/json'], '{"dry-run" : true, "email" : "test@test.at", "username" : "Testuser", "password" : "1234567"}');
    $this->assertResponseStatusCodeSame(204);

    $client->request('POST', '/api/user', [], [], ['HTTP_ACCEPT' => 'application/json', 'CONTENT_TYPE' => 'application/json'], '{"dry-run" : false, "email" : "test@test.at", "username" : "Testuser", "password" : "1234567"}');
    $this->assertResponseStatusCodeSame(201);
    $new_user = $this->entity_manager->getRepository(User::class)
      ->findOneBy(['email' => 'test@test.at'])
            ;
    $this->assertNotNull($new_user);

    $client->request('POST', '/api/user', [], [], ['HTTP_ACCEPT' => 'application/json', 'CONTENT_TYPE' => 'application/json'], '{"dry-run" : true, "email" : "catro@localhost.at", "username" : "catroweb@localhost.at", "password" : "1234567"}');
    $this->assertResponseStatusCodeSame(422);
    $data = $client->getResponse()->getContent();
    $this->assertJsonStringEqualsJsonString($data, '{"username": "Username must not contain an email address"}');

    $client->request('POST', '/api/user', [], [], ['HTTP_ACCEPT' => 'application/json', 'CONTENT_TYPE' => 'application/json'], '{"dry-run" : true, "email" : "catro@localhost.at", "username" : "Scratch: user", "password" : "1234567"}');
    $this->assertResponseStatusCodeSame(422);
    $data = $client->getResponse()->getContent();
    $this->assertJsonStringEqualsJsonString($data, '{"username": "Username invalid"}');

    $client->request('POST', '/api/user', [], [], ['CONTENT_TYPE' => 'application/json'], '{"dry-run" : false, "email" : "test@test.at", "username" : "",}');
    $this->assertResponseStatusCodeSame(400);
  }
}
